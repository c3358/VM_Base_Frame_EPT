#pragma once

/************************************************************************/
/*								∫Í∂®“Â«¯”Ú	                            */
/************************************************************************/


enum msr_encode_state
{
	IA32_FEATURE_CONTROL = 0x3A,
	IA32_VMX_BASIC = 0x480,
	IA32_VMX_CR0_FIXED0 = 0x486,
	IA32_VMX_CR0_FIXED1 = 0x487,
	IA32_VMX_CR4_FIXED0 = 0x488,
	IA32_VMX_CR4_FIXED1 = 0x489,
	MSR_DEBUGCTLB = 0x1D9,
	SYSENTER_CS_MSR = 0x174,
	SYSENTER_ESP_MSR = 0x175,
	SYSENTER_EIP_MSR = 0x176,
	IA32_PERF_GLOBAL_CTRL = 0x38F,
	IA32_PAT_MSR = 0x277,
	IA32_EFER_MSR = 0xC0000080,
	IA32_VMX_PINBASED_CTLS = 0x481,
	IA32_VMX_TRUE_PINBASED_CTLS = 0x48D,
	IA32_VMX_PROCBASED_CTLS = 0x482,
	IA32_VMX_TRUE_PROCBASED_CTLS = 0x48E,
	IA32_VMX_PROCBASED_CTLS2 = 0x48B,

	IA32_VMX_EXIT_CTLS = 0x483,
	IA32_VMX_TRUE_EXIT_CTLS = 0x48F,
	IA32_VMX_ENTRY_CTLS = 0x484,
	IA32_VMX_TRUE_ENTRY_CTLS = 0x490,

	IA32_VMX_EPT_VPID_CAP = 0x48c,
};


enum guest_state
{
	// B.4.3  Natural-Width Guest-State Fields
	GUEST_CR0 = 0x00006800,
	GUEST_CR3 = 0x00006802,
	GUEST_CR4 = 0x00006804,
	GUEST_DR7 = 0x0000681A,

	GUEST_RSP = 0x0000681C,
	GUEST_RIP = 0x0000681E,
	GUEST_RFLAGS = 0x00006820,

	// 16-Bit Guest-State Fields
	GUEST_ES_SELECTOR = 0x00000800,
	GUEST_CS_SELECTOR = 0x00000802,
	GUEST_SS_SELECTOR = 0x00000804,
	GUEST_DS_SELECTOR = 0x00000806,
	GUEST_FS_SELECTOR = 0x00000808,
	GUEST_GS_SELECTOR = 0x0000080A,
	GUEST_LDTR_SELECTOR = 0x0000080C,
	GUEST_TR_SELECTOR = 0x0000080E,

	// 32-Bit Guest-State Fields

	GUEST_ES_LIMIT = 0x00004800,
	GUEST_CS_LIMIT = 0x00004802,
	GUEST_SS_LIMIT = 0x00004804,
	GUEST_DS_LIMIT = 0x00004806,
	GUEST_FS_LIMIT = 0x00004808,
	GUEST_GS_LIMIT = 0x0000480A,
	GUEST_LDTR_LIMIT = 0x0000480C,
	GUEST_TR_LIMIT = 0x0000480E,
	GUEST_GDTR_LIMIT = 0x00004810,
	GUEST_IDTR_LIMIT = 0x00004812,

	GUEST_ES_ACCESS_RIGHTS = 0x00004814,
	GUEST_CS_ACCESS_RIGHTS = 0x00004816,
	GUEST_SS_ACCESS_RIGHTS = 0x00004818,
	GUEST_DS_ACCESS_RIGHTS = 0x0000481A,
	GUEST_FS_ACCESS_RIGHTS = 0x0000481C,
	GUEST_GS_ACCESS_RIGHTS = 0x0000481E,
	GUEST_LDTR_ACCESS_RIGHTS = 0x00004820,
	GUEST_TR_ACCESS_RIGHTS = 0x00004822,

	// Table B-14.  Encodings for Natural-Width Guest-State Fields (0110_10xx_xxxx_xxx0B) 
	GUEST_ES_BASE = 0x00006806,
	GUEST_CS_BASE = 0x00006808,
	GUEST_SS_BASE = 0x0000680A,
	GUEST_DS_BASE = 0x0000680C,
	GUEST_FS_BASE = 0x0000680E,
	GUEST_GS_BASE = 0x00006810,
	GUEST_LDTR_BASE = 0x00006812,
	GUEST_TR_BASE = 0x00006814,
	GUEST_GDTR_BASE = 0x00006816,
	GUEST_IDTR_BASE = 0x00006818,


	GUEST_DEBUGCTL_FULL = 0x00002802,
	GUEST_DEBUGCTL_HIGH = 0x00002803,

	GUEST_IA32_SYSENTER_CS = 0x0000482A,

	GUEST_IA32_SYSENTER_ESP = 0x00006824,

	GUEST_IA32_SYSENTER_EIP = 0x00006826,

	GUEST_IA32_PERF_GLOBAL_CTRL_FULL = 0x00002808,
	GUEST_IA32_PERF_GLOBAL_CTRL_HIGH = 0x00002809,

	GUEST_IA32_PAT_FULL = 0x00002804,
	GUEST_IA32_PAT_HIGH = 0x00002805,

	GUEST_IA32_EFER_FULL = 0x00002806,
	GUEST_IA32_EFER_HIGH = 0x00002807,


	// Encodings for 32-Bit Guest-State Fields 
	GUEST_SMBASE = 0x00004828,

	GUEST_ACTIVITY_STATE = 0x00004826,

	GUEST_INTERRUPTIBILITY_STATE = 0x00004824,

	// Table B-14.  Encodings for Natural-Width Guest-State Fields (0110_10xx_xxxx_xxx0B) 
	GUEST_PENDING_DEBUG_EXCEPTIONS = 0x00006822,

	// Table B-6.  Encodings for 64-Bit Guest-State Fields (0010_10xx_xxxx_xxxAb)
	VMCS_LINK_POINTER_FULL = 0x00002800,
	VMCS_LINK_POINTER_HIGH = 0x00002801,

	// Table B-10.  Encodings for 32-Bit Guest-State Fields (0100_10xx_xxxx_xxx0B)
	VMX_PREEMPTION_TIMER_VALUE = 0x0000482E,

	// Table B-6.  Encodings for 64-Bit Guest-State Fields (0010_10xx_xxxx_xxxAb) (Contd.)
	GUEST_PDPTE0_FULL = 0x0000280A,
	GUEST_PDPTE0_HIGH = 0x0000280B,
	GUEST_PDPTE1_FULL = 0x0000280C,
	GUEST_PDPTE1_HIGH = 0x0000280D,
	GUEST_PDPTE2_FULL = 0x0000280E,
	GUEST_PDPTE2_HIGH = 0x0000280F,
	GUEST_PDPTE3_FULL = 0x00002810,
	GUEST_PDPTE3_HIGH = 0x00002811,

	// Table B-2.  Encodings for 16-Bit Guest-State Fields (0000_10xx_xxxx_xxx0B) (Contd.)
	GUEST_INTERRUPT_STATUS = 0x00000810,
	PML_INDEX = 0x00000812,
};



enum host_state
{
	// Table B-15.  Encodings for Natural-Width Host-State Fields (0110_11xx_xxxx_xxx0B) 
	HOST_CR0 = 0x00006C00,
	HOST_CR3 = 0x00006C02,
	HOST_CR4 = 0x00006C04,

	HOST_RSP = 0x00006C14,
	HOST_RIP = 0x00006C16,

	// Table B-3.  Encodings for 16-Bit Host-State Fields (0000_11xx_xxxx_xxx0B)
	HOST_ES_SELECTOR = 0x00000C00,
	HOST_CS_SELECTOR = 0x00000C02,
	HOST_SS_SELECTOR = 0x00000C04,
	HOST_DS_SELECTOR = 0x00000C06,
	HOST_FS_SELECTOR = 0x00000C08,
	HOST_GS_SELECTOR = 0x00000C0A,
	HOST_TR_SELECTOR = 0x00000C0C,

	// Table B-15.  Encodings for Natural-Width Host-State Fields (0110_11xx_xxxx_xxx0B) 
	HOST_FS_BASE = 0x00006C06,
	HOST_GS_BASE = 0x00006C08,
	HOST_TR_BASE = 0x00006C0A,
	HOST_GDTR_BASE = 0x00006C0C,
	HOST_IDTR_BASE = 0x00006C0E,
	HOST_IA32_SYSENTER_ESP = 0x00006C10,
	HOST_IA32_SYSENTER_EIP = 0x00006C12,

	// Table B-11.  Encoding for 32-Bit Host-State Field (0100_11xx_xxxx_xxx0B)
	HOST_IA32_SYSENTER_CS = 0x00004C00,


	// Table B-7.  Encodings for 64-Bit Host-State Fields (0010_11xx_xxxx_xxxAb)
	HOST_IA32_PAT_FULL = 0x00002C00,
	HOST_IA32_PAT_HIGH = 0x00002C01,
	HOST_IA32_EFER_FULL = 0x00002C02,
	HOST_IA32_EFER_HIGH = 0x00002C03,
	HOST_IA32_PERF_GLOBAL_CTRL_FULL = 0x00002C04,
	HOST_IA32_PERF_GLOBAL_CTRL_HIGH = 0x00002C05,
};


enum execution_state
{
	EXTERNAL_INTERRUP_EXITING = 0,
	NMI_EXITING = 3,
	VIRTUAL_NMIS = 5,
	ACTIVATE_VMX_PREEMPTION_TIMER = 6,
	PROCESS_POSTED_INTERRUPTS = 7,


	/*
	2  Interrupt-window	exiting
	3  Use TSC offsetting
	7  HLT exiting
	9  INVLPG exiting
	10 MWAIT exiting
	11 RDPMC exiting
	12 RDTSC exiting
	15 CR3-load exiting
	16 CR3-store exiting
	19 CR8-load exiting
	20 CR8-store exiting
	21 Use TPR shadow
	22 NMI-window	exiting
	23 MOV-DR exiting
	24 Unconditional I/O exiting
	25 Use I/O bitmaps
	27 Monitor trap flag
	28 Use MSR bitmaps
	29 MONITOR exiting
	30 PAUSE exiting
	31 Activate secondary controls
	*/

	PIN_BASED_VM_EXECUTION_CONTROLS = 0x00004000,
	PRIMARY_PROCESSOR_BASED_VM_EXECUTION_CONTROLS = 0x00004002,
	EXCEPTION_BITMAP = 0x00004004,
	MSR_BITMAPS = 28,
	DRX_ACCESS = 23,
	/*
	Page-fault error-code mask 000000011B 00004006H
	Page-fault error-code match 000000100B 00004008H
	CR3-target count 000000101B 0000400AH
	VM-exit controls 000000110B 0000400CH
	VM-exit MSR-store count 000000111B 0000400EH
	VM-exit MSR-load count 000001000B 00004010H
	VM-entry controls 000001001B 00004012H
	VM-entry MSR-load count 000001010B 00004014H
	VM-entry interruption-information field 000001011B 00004016H
	VM-entry exception error code 000001100B 00004018H
	VM-entry instruction length 000001101B 0000401AH
	TPR threshold1 000001110B 0000401CH
	Secondary processor-based VM-execution controls2 000001111b 0000401EH
	PLE_Gap3 000010000b 00004020H
	PLE_Window3 000010001b 00004022H
	*/

	ADDRESS_OF_MSR_BITMAPS_FULL = 0x00002004,
	ADDRESS_OF_MSR_BITMAPS_HIGH = 0x00002005,
};

enum exitentry_state
{
	VM_EXIT_CONTROLS = 0x0000400C,
	VM_ENTRY_CONTROLS = 0x00004012,
	VM_INSTRUCTION_ERROR = 0x00004400,
};

enum exit_handle_state
{
	// Table B-9.  Encodings for 32-Bit Read-Only Data Fields (0100_01xx_xxxx_xxx0B)
	EXIT_REASON = 0x00004402,
	VM_EXIT_INSTRUCTION_LENGTH = 0x0000440C,
	VM_EXIT_INSTRUCTION_INFORMATION = 0x0000440E,


	VM_EXIT_INTERRUPTION_INFORMATION = 0x00004404,
	VM_EXIT_INTERRUPTION_ERROR_CODE = 0x00004406,
	kExitQualification = 0x00006400,

	VM_ENTRY_INTERRUPTION_INFORMATION = 0x00004016,
	VM_ENTRY_EXCEPTION_ERROR_CODE = 0x00004018,
	VM_ENTRY_INSTRUCTION_LENGTH = 0x0000401A,
	// Table B-9.  Encodings for 32-Bit Read-Only Data Fields (0100_01xx_xxxx_xxx0B)
	/*
	IDT-vectoring information field 000000100B 00004408H
	IDT-vectoring error code 000000101B 0000440AH
	*/

};



enum exception_type_state
{
	DEBUG_EXCEPTION = 0x1,
	BREAKPOINT_EXCEPTION = 0x3,

};